Thoughts on the system architecture:
  Stack:
    React
    Node / Express: fast, nonblocking I/O; we don't have a need for intensive computation on the server side
    Mocha
    Chai
    Enzyme: for testing in a React / ES6 environment: https://medium.com/airbnb-engineering/enzyme-javascript-testing-utilities-for-react-a417e5e5090f#.vk7m25hq3
    Airbnb style guide
    HTTPS for location-based services in Chrome per https://developers.google.com/web/updates/2016/04/geolocation-on-secure-contexts-only?hl=en
    NPR One API: http://dev.npr.org/
    HTML5 Geolocation API: https://developer.mozilla.org/en-US/docs/Web/API/Geolocation/Using_geolocation

Follow up on / next steps:
  - followup on radio API and determine what data is available
  - wireframes for frontend
  - DB choice and schema design

Reminders
  - SSL certs are sort of working for development only - need to find a way to enable https in Chrome with 
  self-signed certificates
  - the commented out code in server.js is an alternate approach to SSL certs that will need to be tested once
  site is in production


How to create a self-signed certificate

from http://www.i-visionblog.com/2014/10/create-https-tls-ssl-application-with-express-nodejs-in-localhost-openssl.html

*replace [/path/to/privKey.pem] with local path to the private key file, ending in server/config/private/ssl-keys/privKey.pem
*replace [/path/to/cert.pem] with local path to the certificate file, ending in server/config/private/ssl-keys/cert.pem

1)  openssl genrsa 1024 [/path/to/privKey.pem]
2)  openssl req -new -key [/path/to/privKey.pem] -out csr.pem
  follow the prompts to enter information that is included in the certificate request
3) openssl x509 -req -days 365 -in csr.pem -signkey [/path/to/privKey.pem] -out [/path/to/cert.pem]
